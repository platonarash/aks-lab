**********  modified lab - DOTNET *********

https://github.com/platonarash/aks-lab.git

(https://github.com/pelithne/kubernetes-workshop/blob/master/workshop.md)


AKS: RG: AKS, name: arraaks
ACR: arraaksreg.azurecr.io


********** DOCKER ***********

https://docs.docker.com/engine/examples/dotnetcore/

1. git clone https://github.com/dotnet/dotnet-docker-samples/
2. cd .\dotnet-docker-samples\aspnetapp\
3. docker build -t aspnetapp .
3. docker container list 
4. docker run -d -p 8080:80 --name myapp aspnetapp
5. docker container list
6. Browse http://localhost:8080
7. docker stop myapp
8. Should fail to browse http://localhost:8080
8a. Ändra i dotnet\dotnet-docker-samples\aspnetapp\Views\Home\About.cshtml
9. Bygg container 
10. Kör container lokalt och browsa till http://localhost:8080 - About ska ha ändrats


***** AKS **********
https://docs.azure.cn/en-us/cli/reference-index
https://kubernetes.io/docs/reference/kubectl/cheatsheet/
https://kubernetes.io/docs/reference/kubectl/kubectl/

1.  az group create --name <Your RG name> --location westeurope
2.  az acr create --resource-group <Your RG name from above> --name <Your ACR Name> --sku Basic
3.  az acr login --name <Your ACR Name>
4a. docker images
4b. docker tag aspnetapp <Your ACR Name>.azurecr.io/<unique name>/aspnetapp:v1
4c. docker images (same image id but different repository in the list)
5.  docker push <Your ACR Name>.azurecr.io/<unique name>/aspnetapp:v1
6.  az acr repository list --name <Your ACR Name> --output table
7.  az aks get-credentials --resource-group <AKS-Resource-Group> --name <Name-Of-AKS-Cluster>
7a. File change C:\Users\<UserName>\.kube\config
7aa.kubectl cluster-info
7b. kubectl get nodes, kubectl get nodes -o wide
7c. kubectl get pods, kubectl get pods -o wide
7d. kubectl get deployment
7e. kubectl describe pods
7f. kubectl get pods --namespace kube-system -o wide
7g. kubectl explain pod | more

Upgrade cluster - https://docs.microsoft.com/en-us/azure/aks/upgrade-cluster
8. az aks get-upgrades --resource-group myResourceGroup --name myAKSCluster --output table
8a. az aks upgrade --resource-group myResourceGroup --name myAKSCluster --kubernetes-version 1.12.6


9. Access to K8s dashboard: https://docs.microsoft.com/en-us/azure/aks/kubernetes-dashboard
9a. kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboardaz
9b. az aks browse --resource-group <AKS-ResourceGroup> --name <AKS-clustername>

*** AKS authenticate to ACR ***
10a. $CLIENT_ID=az aks show --resource-group <AKS-ResourceGroup> --name <AKS-cluster-name> --query "servicePrincipalProfile.clientId" --output tsv 
10b. $ACR_ID=az acr show --name <ACR-name> --resource-group <AKS-ResourceGroup> --query "id" --output tsv
10c. az role assignment create --assignee $CLIENT_ID --role Reader --scope $ACR_ID

_________________

apiVersion: v1
kind: Service
metadata:
  name: apsnetapp
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: aspnetapp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aspnetapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aspnetapp
  template:
    metadata:
      labels:
        app: aspnetapp
    spec:
      containers:
      - name: aspnetapp
        image: arraaksreg.azurecr.io/dotnet/aspnetapp:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        



________________


10. kubectl apply -f aspnetapp-aks.yaml
11. Ändra   replicas: till "4" - kolla i kubernetes portalen
12. kubectl get pods eller kubectl get nodes -o wide - ger 4 pods


--------- Uppdatera Dotnet Appen och deploya ---------

13. Ändra i .\lab\dotnet\dotnet-docker-samples\aspnetapp\Views\Home\About.cshtml -> 

@{
    ViewData["Title"] = "My Name Azure AKS ";
}

14. docker build (som tidigare)
15. docker run (som tidigare - tips om du måste döda containers: docker container, docker container rm <containerId>)
16. Browse http://localhost:8080/Home/About - nu ska du se din nya text
18. push till Azure Container Registry fast med ny version:



18. Ändra i aspnetapp-aks.yaml

 spec:
      containers:
      - name: aspnetapp
        image: arraaksreg.azurecr.io/dotnet/aspnetapp:v2     <---- ändra till v2


19. deploya i AKS
kubectl -f  aspnetapp-aks.yaml







-------------------------  HELM -------------------------------------



https://github.com/pelithne/kubernetes-workshop/blob/master/workshop.md#configure-helm

https://carlos.mendible.com/2018/11/18/develop-and-build-aspnetcore-applications-to-run-on-kubernetes-with-draft/


1. insall https://chocolatey.org/
2. choco install kubernetes-helm     -  https://chocolatey.org/packages/kubernetes-helm
3. helm init

4.
kubectl create serviceaccount --namespace kube-system tiller
kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}' <--- körs i Azure cloud shell

https://carlos.mendible.com/2018/11/18/develop-and-build-aspnetcore-applications-to-run-on-kubernetes-with-draft/


4. Kopiera katalogen: C:\AKS\lab\dotnet\dotnet-docker-samples\aspnetapp

Gå ner i nya katalogen och kör:

>draft config set registry arraaksreg.azurecr.io
>draft create --pack=csharp -a aspnetapp2
>draft up

5. Gå in i Kubernetes dashboard och se er applikation side-by-side med den gamla
6. Ändra aspnetapp2\values.yaml

type: LoadBalancer

7. draft up
8. Se Kubernetes dashboard services att det skapas en extern endpoint och browsa till den



------ INGRESS -----
https://docs.microsoft.com/en-us/azure/aks/http-application-routing

1. az aks enable-addons --resource-group <myResourceGroup> --name <myAKSCluster> --addons http_application_routing
2. az aks show --resource-group myResourceGroup --name myAKSCluster --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o table

Result
-----------------------------------------------------
9f9c1fe7-21a1-416d-99cd-3543bb92e4c3.eastus.aksapp.io


2. Öppna din config map (yaml):


 annotations:
  kubernetes.io/ingress.class: addon-http-application-routing









*** DEVSPACES ***
.net core + VSCode - https://docs.microsoft.com/en-us/azure/dev-spaces/quickstart-netcore?toc=%2Fen-us%2Fazure%2Faks%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json
.net core + VS Studio 2017 - https://docs.microsoft.com/en-us/azure/dev-spaces/quickstart-netcore-visualstudio?toc=%2Fen-us%2Fazure%2Faks%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json



_________________

********** Bra att ha ************


Docker Clean
	Clean up any resources — images, containers, volumes, and networks — that are dangling (not associated with a container):
	docker system prune
	
	To additionally remove any stopped containers and all unused images (not just dangling images), add the -a flag to the command:
	docker system prune -a
	
	
	List
	docker images -a
	
	Remove 
	docker rmi Image Image
	
	Remove dangling images - List
	docker images -f dangling=true
	
	Remove dangling
    docker images purge


